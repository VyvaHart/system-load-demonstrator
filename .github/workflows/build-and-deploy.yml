name: Build and Push Load Shifter to GHCR

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}

jobs:
  build-and-push-ghcr:
    name: Build Docker image and push to GHCR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=short 
            type=raw,value=latest,enable={{is_default_branch}}


      - name: Build and push Docker image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  provide-deployment-instructions:
    name: Provide Minikube Deployment Instructions
    runs-on: ubuntu-latest
    needs: build-and-push-ghcr

    steps: # Display instructions for deploying the Docker image to Minikube
      - name: Display Manual Deployment Instructions
        run: |
          echo "---------------------------------------------------------------------"
          echo "Docker image built and pushed to GHCR!"
          echo ""
          echo "Image Name: ${{ env.IMAGE_NAME }}"
          echo "Available tags include: latest (for main branch), main, ${{ github.sha }}"
          echo "(Check GHCR for the proper list of tags pushed by this run)"
          echo ""
          echo "To deploy/update in your LOCAL Minikube:"
          echo "---------------------------------------------------------------------"
          echo "1. Make sure Minikube is running: 'minikube start'"
          echo ""
          echo "2. Update Kubernetes manifests:"
          echo "   Make sure the 'image:' field points to GHCR image."
          echo "   Example (using the 'latest' tag, recommended for main branch updates):"
          echo "     image: ${{ env.IMAGE_NAME }}:latest"
          echo "     imagePullPolicy: Always  # Important when using ':latest' or frequently changing tags"
          echo "   Or, for a specific version/commit:"
          echo "     image: ${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "     imagePullPolicy: IfNotPresent"
          echo ""
          echo "3. If your GHCR package is private (and your Minikube doesn't have credentials):"
          echo "   You might need to create an imagePullSecret in Minikube:"
          echo "   kubectl create secret docker-registry ghcr-secret --docker-server=ghcr.io --docker-username=${{ github.repository_owner }} --docker-password=YOUR_GHCR_TOKEN_VALUE --docker-email=your-email@example.com"
          echo "   Then add 'imagePullSecrets: - name: ghcr-secret' to your deployment's pod spec."
          echo "   (For public GHCR packages linked to public repos, this is usually not needed)."
          echo ""
          echo "4. Apply your Kubernetes manifests to Minikube:"
          echo "   If 'k8s/' directory contains your manifests:"
          echo "     kubectl apply -f k8s/deployment.yaml"
          echo "     kubectl apply -f k8s/service.yaml"
          echo "   (Or 'kubectl apply -f k8s/' to apply all in that directory)"
          echo ""
          echo "5. If the deployment is already running and you updated the image (especially if using ':latest'):"
          echo "   Force a rollout to pick up the new image version:"
          echo "     kubectl rollout restart deployment load-shifter-app"
          echo ""
          echo "6. Check the status of your deployment:"
          echo "   kubectl get pods -w  # Watch pods until 'Running'"
          echo "   kubectl logs <your-new-pod-name> # Check logs if issues"
          echo ""
          echo "7. Access your service:"
          echo "   minikube service load-shifter-service"
          echo "---------------------------------------------------------------------"